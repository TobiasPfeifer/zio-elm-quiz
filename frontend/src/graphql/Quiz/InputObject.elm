-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Quiz.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Quiz.Enum.Answer
import Quiz.Interface
import Quiz.Object
import Quiz.Scalar
import Quiz.ScalarCodecs
import Quiz.Union


buildChoicesInput :
    ChoicesInputRequiredFields
    -> ChoicesInput
buildChoicesInput required____ =
    { a = required____.a, b = required____.b, c = required____.c, d = required____.d }


type alias ChoicesInputRequiredFields =
    { a : String
    , b : String
    , c : String
    , d : String
    }


{-| Type for the ChoicesInput input object.
-}
type alias ChoicesInput =
    { a : String
    , b : String
    , c : String
    , d : String
    }


{-| Encode a ChoicesInput into a value that can be used as an argument.
-}
encodeChoicesInput : ChoicesInput -> Value
encodeChoicesInput input____ =
    Encode.maybeObject
        [ ( "a", Encode.string input____.a |> Just ), ( "b", Encode.string input____.b |> Just ), ( "c", Encode.string input____.c |> Just ), ( "d", Encode.string input____.d |> Just ) ]


buildQuestionWithSolutionInput :
    QuestionWithSolutionInputRequiredFields
    -> (QuestionWithSolutionInputOptionalFields -> QuestionWithSolutionInputOptionalFields)
    -> QuestionWithSolutionInput
buildQuestionWithSolutionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { imageUrl = Absent }
    in
    { question = required____.question, imageUrl = optionals____.imageUrl, points = required____.points, choices = required____.choices, correctAnswer = required____.correctAnswer }


type alias QuestionWithSolutionInputRequiredFields =
    { question : String
    , points : Int
    , choices : ChoicesInput
    , correctAnswer : Quiz.Enum.Answer.Answer
    }


type alias QuestionWithSolutionInputOptionalFields =
    { imageUrl : OptionalArgument String }


{-| Type for the QuestionWithSolutionInput input object.
-}
type alias QuestionWithSolutionInput =
    { question : String
    , imageUrl : OptionalArgument String
    , points : Int
    , choices : ChoicesInput
    , correctAnswer : Quiz.Enum.Answer.Answer
    }


{-| Encode a QuestionWithSolutionInput into a value that can be used as an argument.
-}
encodeQuestionWithSolutionInput : QuestionWithSolutionInput -> Value
encodeQuestionWithSolutionInput input____ =
    Encode.maybeObject
        [ ( "question", Encode.string input____.question |> Just ), ( "imageUrl", Encode.string |> Encode.optional input____.imageUrl ), ( "points", Encode.int input____.points |> Just ), ( "choices", encodeChoicesInput input____.choices |> Just ), ( "correctAnswer", Encode.enum Quiz.Enum.Answer.toString input____.correctAnswer |> Just ) ]
