-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Quiz.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Quiz.InputObject
import Quiz.Interface
import Quiz.Object
import Quiz.Scalar
import Quiz.ScalarCodecs
import Quiz.Union


test : SelectionSet String RootQuery
test =
    Object.selectionForField "String" "test" [] Decode.string


type alias QuizzesRequiredArguments =
    { limit : Int }


quizzes :
    QuizzesRequiredArguments
    -> SelectionSet decodesTo Quiz.Object.QuizEntity
    -> SelectionSet (List decodesTo) RootQuery
quizzes requiredArgs____ object____ =
    Object.selectionForCompositeField "quizzes" [ Argument.required "limit" requiredArgs____.limit Encode.int ] object____ (identity >> Decode.list)


type alias QuizRequiredArguments =
    { quizId : String }


quiz :
    QuizRequiredArguments
    -> SelectionSet decodesTo Quiz.Object.QuizEntity
    -> SelectionSet (Maybe decodesTo) RootQuery
quiz requiredArgs____ object____ =
    Object.selectionForCompositeField "quiz" [ Argument.required "quizId" requiredArgs____.quizId Encode.string ] object____ (identity >> Decode.nullable)
