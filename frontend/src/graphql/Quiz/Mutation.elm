-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Quiz.Mutation exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Quiz.Enum.Answer
import Quiz.InputObject
import Quiz.Interface
import Quiz.Object
import Quiz.Scalar
import Quiz.ScalarCodecs
import Quiz.Union


type alias CreateQuizRequiredArguments =
    { title : String
    , questions : List Quiz.InputObject.QuestionWithSolutionInput
    }


createQuiz :
    CreateQuizRequiredArguments
    -> SelectionSet decodesTo Quiz.Object.QuizEntity
    -> SelectionSet (Maybe decodesTo) RootMutation
createQuiz requiredArgs____ object____ =
    Object.selectionForCompositeField "createQuiz" [ Argument.required "title" requiredArgs____.title Encode.string, Argument.required "questions" requiredArgs____.questions (Quiz.InputObject.encodeQuestionWithSolutionInput |> Encode.list) ] object____ (identity >> Decode.nullable)


type alias StartGameRequiredArguments =
    { adminCode : String
    , gameId : String
    }


startGame :
    StartGameRequiredArguments
    -> SelectionSet (Maybe Quiz.ScalarCodecs.Unit) RootMutation
startGame requiredArgs____ =
    Object.selectionForField "(Maybe ScalarCodecs.Unit)" "startGame" [ Argument.required "adminCode" requiredArgs____.adminCode Encode.string, Argument.required "gameId" requiredArgs____.gameId Encode.string ] (Quiz.ScalarCodecs.codecs |> Quiz.Scalar.unwrapCodecs |> .codecUnit |> .decoder |> Decode.nullable)


type alias VoteRequiredArguments =
    { playerCode : String
    , gameId : String
    , answer : Quiz.Enum.Answer.Answer
    }


vote :
    VoteRequiredArguments
    -> SelectionSet (Maybe Quiz.ScalarCodecs.Unit) RootMutation
vote requiredArgs____ =
    Object.selectionForField "(Maybe ScalarCodecs.Unit)" "vote" [ Argument.required "playerCode" requiredArgs____.playerCode Encode.string, Argument.required "gameId" requiredArgs____.gameId Encode.string, Argument.required "answer" requiredArgs____.answer (Encode.enum Quiz.Enum.Answer.toString) ] (Quiz.ScalarCodecs.codecs |> Quiz.Scalar.unwrapCodecs |> .codecUnit |> .decoder |> Decode.nullable)


type alias CreateGameRequiredArguments =
    { quizId : String
    , title : String
    }


createGame :
    CreateGameRequiredArguments
    -> SelectionSet decodesTo Quiz.Object.Game
    -> SelectionSet (Maybe decodesTo) RootMutation
createGame requiredArgs____ object____ =
    Object.selectionForCompositeField "createGame" [ Argument.required "quizId" requiredArgs____.quizId Encode.string, Argument.required "title" requiredArgs____.title Encode.string ] object____ (identity >> Decode.nullable)
