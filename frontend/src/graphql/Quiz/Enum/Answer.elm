-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Quiz.Enum.Answer exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Answer
    = A
    | B
    | C
    | D


list : List Answer
list =
    [ A, B, C, D ]


decoder : Decoder Answer
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "A" ->
                        Decode.succeed A

                    "B" ->
                        Decode.succeed B

                    "C" ->
                        Decode.succeed C

                    "D" ->
                        Decode.succeed D

                    _ ->
                        Decode.fail ("Invalid Answer type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Answer -> String
toString enum____ =
    case enum____ of
        A ->
            "A"

        B ->
            "B"

        C ->
            "C"

        D ->
            "D"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Answer
fromString enumString____ =
    case enumString____ of
        "A" ->
            Just A

        "B" ->
            Just B

        "C" ->
            Just C

        "D" ->
            Just D

        _ ->
            Nothing
