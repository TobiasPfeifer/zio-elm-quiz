-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Quiz.Union.Event exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode
import Quiz.InputObject
import Quiz.Interface
import Quiz.Object
import Quiz.Scalar
import Quiz.ScalarCodecs
import Quiz.Union


type alias Fragments decodesTo =
    { onGameFinished : SelectionSet decodesTo Quiz.Object.GameFinished
    , onGameStarted : SelectionSet decodesTo Quiz.Object.GameStarted
    , onNextQuestion : SelectionSet decodesTo Quiz.Object.NextQuestion
    , onPlayerCodeCreated : SelectionSet decodesTo Quiz.Object.PlayerCodeCreated
    , onPlayerJoined : SelectionSet decodesTo Quiz.Object.PlayerJoined
    , onQuestionEnded : SelectionSet decodesTo Quiz.Object.QuestionEnded
    }


{-| Build up a selection for this Union by passing in a Fragments record.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Quiz.Union.Event
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "GameFinished" selections____.onGameFinished
        , Object.buildFragment "GameStarted" selections____.onGameStarted
        , Object.buildFragment "NextQuestion" selections____.onNextQuestion
        , Object.buildFragment "PlayerCodeCreated" selections____.onPlayerCodeCreated
        , Object.buildFragment "PlayerJoined" selections____.onPlayerJoined
        , Object.buildFragment "QuestionEnded" selections____.onQuestionEnded
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onGameFinished = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onGameStarted = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onNextQuestion = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onPlayerCodeCreated = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onPlayerJoined = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onQuestionEnded = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }
